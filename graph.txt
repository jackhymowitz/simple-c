
#include <set>
#include <queue>
#include <queue>
#include "graph.h"
#include <cstdio>
#include <cstdlib>
#include <iostream>
using namespace std;

Graph::Graph(int nodes)
{
    this->nodes = nodes;
    this->matrix = new int*[nodes];

    for (int i = 0; i < nodes; ++i) {
        (this->matrix)[i] = new int[nodes];

        for (int j = 0; j < nodes; ++j) {
            (this->matrix)[i][j] = 0;
        }
    }
}

Graph::Graph(int **matrix, int nodes) {
    this->nodes = nodes;
    this->matrix = new int*[nodes];

    for (int i = 0; i < nodes; ++i) {
        (this->matrix)[i] = new int[nodes];

        for (int j = 0; j < nodes; ++j) {
            (this->matrix)[i][j] = matrix[i][j];
        }
    }
}

Graph::~Graph()
{
    for (int i = 0; i < this->nodes; ++i) {
        delete[] (this->matrix)[i];
    }
    delete[] this->matrix;
}

bool Graph::set_edge(int i, int j, int edge)
{
    if (i < this->nodes && j < this->nodes && i >= 0 && j >= 0) {
        (this->matrix)[i][j] = edge;
        return true;
    }

    return false;
}

void Graph::dfs()
{
	set<int> visited;
	dfs(0,&visited);
}
void Graph::dfs(int start, set<int> *visited)
{
    //Check if visited
	if(visited->find(start) != visited->end())
	{
		return;
	}
	
	//We didn't visit before, now visit all neighboring nodes
	visited->insert(start);
	cout<<"Discovered "<<start<<endl;
	for(int j=0;j<nodes;j++)
	{
		if(this->matrix[start][j])
		{
			dfs(j,visited);
		}
	}
	cout<<"Finished "<<start<<endl;
}
void Graph::bfs(int start)
{
    set<int> visited;
	bfs(0,&visited);
}
void Graph::bfs(int start, set<int> *visited)
{
	
	queue<int> to_visit;
	to_visit.push(start);
	int cur;
	while(!to_visit.empty())
	{
		cur=to_visit.front();
		to_visit.pop();
		if(visited->find(cur) == visited->end())
		{
			cout<<"Visiting "<<cur<<endl;
			visited->insert(cur);
			for(int j=0;j<nodes;j++)
			{
				if(this->matrix[cur][j])
				{
					if(visited->find(j) == visited->end())
					{
						to_visit.push(j);
						cout<<"Added "<<j<<" to queue"<<endl;
					}
				}
			}
		}
	}
	
}

